package com.edupress.domain;

import static com.edupress.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CourseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseAllPropertiesEquals(Course expected, Course actual) {
        assertCourseAutoGeneratedPropertiesEquals(expected, actual);
        assertCourseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseAllUpdatablePropertiesEquals(Course expected, Course actual) {
        assertCourseUpdatableFieldsEquals(expected, actual);
        assertCourseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseAutoGeneratedPropertiesEquals(Course expected, Course actual) {
        assertThat(actual)
            .as("Verify Course auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseUpdatableFieldsEquals(Course expected, Course actual) {
        assertThat(actual)
            .as("Verify Course relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getSlug()).as("check slug").isEqualTo(expected.getSlug()))
            .satisfies(a -> assertThat(a.getShortDescription()).as("check shortDescription").isEqualTo(expected.getShortDescription()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getThumbnailUrl()).as("check thumbnailUrl").isEqualTo(expected.getThumbnailUrl()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a ->
                assertThat(a.getOriginalPrice())
                    .as("check originalPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getOriginalPrice())
            )
            .satisfies(a -> assertThat(a.getLevel()).as("check level").isEqualTo(expected.getLevel()))
            .satisfies(a -> assertThat(a.getLanguage()).as("check language").isEqualTo(expected.getLanguage()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getIsPublished()).as("check isPublished").isEqualTo(expected.getIsPublished()))
            .satisfies(a -> assertThat(a.getIsFeatured()).as("check isFeatured").isEqualTo(expected.getIsFeatured()))
            .satisfies(a -> assertThat(a.getAverageRating()).as("check averageRating").isEqualTo(expected.getAverageRating()))
            .satisfies(a -> assertThat(a.getEnrollmentCount()).as("check enrollmentCount").isEqualTo(expected.getEnrollmentCount()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourseUpdatableRelationshipsEquals(Course expected, Course actual) {
        assertThat(actual)
            .as("Verify Course relationships")
            .satisfies(a -> assertThat(a.getInstructor()).as("check instructor").isEqualTo(expected.getInstructor()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()));
    }
}
