package com.edupress.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AssignmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentAllPropertiesEquals(Assignment expected, Assignment actual) {
        assertAssignmentAutoGeneratedPropertiesEquals(expected, actual);
        assertAssignmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentAllUpdatablePropertiesEquals(Assignment expected, Assignment actual) {
        assertAssignmentUpdatableFieldsEquals(expected, actual);
        assertAssignmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentAutoGeneratedPropertiesEquals(Assignment expected, Assignment actual) {
        assertThat(actual)
            .as("Verify Assignment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentUpdatableFieldsEquals(Assignment expected, Assignment actual) {
        assertThat(actual)
            .as("Verify Assignment relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getInstructions()).as("check instructions").isEqualTo(expected.getInstructions()))
            .satisfies(a -> assertThat(a.getDueDate()).as("check dueDate").isEqualTo(expected.getDueDate()))
            .satisfies(a -> assertThat(a.getMaxPoints()).as("check maxPoints").isEqualTo(expected.getMaxPoints()))
            .satisfies(a -> assertThat(a.getSubmissionType()).as("check submissionType").isEqualTo(expected.getSubmissionType()))
            .satisfies(a -> assertThat(a.getAllowedFileTypes()).as("check allowedFileTypes").isEqualTo(expected.getAllowedFileTypes()))
            .satisfies(a -> assertThat(a.getMaxFileSize()).as("check maxFileSize").isEqualTo(expected.getMaxFileSize()))
            .satisfies(a -> assertThat(a.getIsPublished()).as("check isPublished").isEqualTo(expected.getIsPublished()))
            .satisfies(a ->
                assertThat(a.getAllowLateSubmission()).as("check allowLateSubmission").isEqualTo(expected.getAllowLateSubmission())
            )
            .satisfies(a ->
                assertThat(a.getLateSubmissionPenalty()).as("check lateSubmissionPenalty").isEqualTo(expected.getLateSubmissionPenalty())
            )
            .satisfies(a -> assertThat(a.getSortOrder()).as("check sortOrder").isEqualTo(expected.getSortOrder()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentUpdatableRelationshipsEquals(Assignment expected, Assignment actual) {
        assertThat(actual)
            .as("Verify Assignment relationships")
            .satisfies(a -> assertThat(a.getCourse()).as("check course").isEqualTo(expected.getCourse()))
            .satisfies(a -> assertThat(a.getLesson()).as("check lesson").isEqualTo(expected.getLesson()));
    }
}
