package com.edupress.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QuizAttemptAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizAttemptAllPropertiesEquals(QuizAttempt expected, QuizAttempt actual) {
        assertQuizAttemptAutoGeneratedPropertiesEquals(expected, actual);
        assertQuizAttemptAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizAttemptAllUpdatablePropertiesEquals(QuizAttempt expected, QuizAttempt actual) {
        assertQuizAttemptUpdatableFieldsEquals(expected, actual);
        assertQuizAttemptUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizAttemptAutoGeneratedPropertiesEquals(QuizAttempt expected, QuizAttempt actual) {
        assertThat(actual)
            .as("Verify QuizAttempt auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizAttemptUpdatableFieldsEquals(QuizAttempt expected, QuizAttempt actual) {
        assertThat(actual)
            .as("Verify QuizAttempt relevant properties")
            .satisfies(a -> assertThat(a.getStartedAt()).as("check startedAt").isEqualTo(expected.getStartedAt()))
            .satisfies(a -> assertThat(a.getSubmittedAt()).as("check submittedAt").isEqualTo(expected.getSubmittedAt()))
            .satisfies(a -> assertThat(a.getScore()).as("check score").isEqualTo(expected.getScore()))
            .satisfies(a -> assertThat(a.getPassed()).as("check passed").isEqualTo(expected.getPassed()))
            .satisfies(a -> assertThat(a.getAnswers()).as("check answers").isEqualTo(expected.getAnswers()))
            .satisfies(a -> assertThat(a.getAttemptNumber()).as("check attemptNumber").isEqualTo(expected.getAttemptNumber()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizAttemptUpdatableRelationshipsEquals(QuizAttempt expected, QuizAttempt actual) {
        assertThat(actual)
            .as("Verify QuizAttempt relationships")
            .satisfies(a -> assertThat(a.getQuiz()).as("check quiz").isEqualTo(expected.getQuiz()))
            .satisfies(a -> assertThat(a.getStudent()).as("check student").isEqualTo(expected.getStudent()));
    }
}
