package com.edupress.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AssignmentSubmissionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentSubmissionAllPropertiesEquals(AssignmentSubmission expected, AssignmentSubmission actual) {
        assertAssignmentSubmissionAutoGeneratedPropertiesEquals(expected, actual);
        assertAssignmentSubmissionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentSubmissionAllUpdatablePropertiesEquals(AssignmentSubmission expected, AssignmentSubmission actual) {
        assertAssignmentSubmissionUpdatableFieldsEquals(expected, actual);
        assertAssignmentSubmissionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentSubmissionAutoGeneratedPropertiesEquals(AssignmentSubmission expected, AssignmentSubmission actual) {
        assertThat(actual)
            .as("Verify AssignmentSubmission auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentSubmissionUpdatableFieldsEquals(AssignmentSubmission expected, AssignmentSubmission actual) {
        assertThat(actual)
            .as("Verify AssignmentSubmission relevant properties")
            .satisfies(a -> assertThat(a.getSubmittedAt()).as("check submittedAt").isEqualTo(expected.getSubmittedAt()))
            .satisfies(a -> assertThat(a.getSubmissionText()).as("check submissionText").isEqualTo(expected.getSubmissionText()))
            .satisfies(a -> assertThat(a.getFileUrls()).as("check fileUrls").isEqualTo(expected.getFileUrls()))
            .satisfies(a -> assertThat(a.getGrade()).as("check grade").isEqualTo(expected.getGrade()))
            .satisfies(a -> assertThat(a.getFeedback()).as("check feedback").isEqualTo(expected.getFeedback()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentSubmissionUpdatableRelationshipsEquals(AssignmentSubmission expected, AssignmentSubmission actual) {
        assertThat(actual)
            .as("Verify AssignmentSubmission relationships")
            .satisfies(a -> assertThat(a.getAssignment()).as("check assignment").isEqualTo(expected.getAssignment()))
            .satisfies(a -> assertThat(a.getStudent()).as("check student").isEqualTo(expected.getStudent()));
    }
}
