package com.edupress.domain;

import static com.edupress.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class EnrollmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentAllPropertiesEquals(Enrollment expected, Enrollment actual) {
        assertEnrollmentAutoGeneratedPropertiesEquals(expected, actual);
        assertEnrollmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentAllUpdatablePropertiesEquals(Enrollment expected, Enrollment actual) {
        assertEnrollmentUpdatableFieldsEquals(expected, actual);
        assertEnrollmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentAutoGeneratedPropertiesEquals(Enrollment expected, Enrollment actual) {
        assertThat(actual)
            .as("Verify Enrollment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentUpdatableFieldsEquals(Enrollment expected, Enrollment actual) {
        assertThat(actual)
            .as("Verify Enrollment relevant properties")
            .satisfies(a -> assertThat(a.getEnrollmentDate()).as("check enrollmentDate").isEqualTo(expected.getEnrollmentDate()))
            .satisfies(a -> assertThat(a.getProgressPercentage()).as("check progressPercentage").isEqualTo(expected.getProgressPercentage())
            )
            .satisfies(a -> assertThat(a.getProgress()).as("check progress").isEqualTo(expected.getProgress()))
            .satisfies(a -> assertThat(a.getLastAccessedAt()).as("check lastAccessedAt").isEqualTo(expected.getLastAccessedAt()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPaymentStatus()).as("check paymentStatus").isEqualTo(expected.getPaymentStatus()))
            .satisfies(a ->
                assertThat(a.getAmountPaid())
                    .as("check amountPaid")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getAmountPaid())
            )
            .satisfies(a -> assertThat(a.getTransactionId()).as("check transactionId").isEqualTo(expected.getTransactionId()))
            .satisfies(a -> assertThat(a.getCompletedAt()).as("check completedAt").isEqualTo(expected.getCompletedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnrollmentUpdatableRelationshipsEquals(Enrollment expected, Enrollment actual) {
        assertThat(actual)
            .as("Verify Enrollment relationships")
            .satisfies(a -> assertThat(a.getCourse()).as("check course").isEqualTo(expected.getCourse()))
            .satisfies(a -> assertThat(a.getStudent()).as("check student").isEqualTo(expected.getStudent()));
    }
}
